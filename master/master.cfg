# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("main-slave", "pass1")]

# TODO  - extend for more slaves.
# TODO  - split into separate file

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
#from buildbot.changes.svnpoller import SVNPoller
#from buildbot.changes.svnpoller import split_file_alwaystrunk

# llvmlinux, llvm (llvm+clang), qemu, linux
############################################
c['change_source'] = []

# llvmlinux poller - this is the main build tool set
# has internal fetcher! 
# check any commit to the build tool before we move it to
# the central location
c['change_source'].append(GitPoller(
                'http://git.linuxfoundation.org/llvmlinux.git',
                workdir='llvmlinux-poller',
                branch='master',
                pollinterval=596, 
                project='llvmlinux')
)

# llvm main source. needed to build clang.
# bundled with clang build
c['change_source'].append(GitPoller(
                'http://llvm.org/git/llvm.git',
                workdir='llvm-poller',
                branch='master',
                pollinterval=597,
                project='llvm')
)

# clang source. built withing llvm tree.
# bundled with llvm build
c['change_source'].append(GitPoller(
                'http://llvm.org/git/clang.git',
                workdir='clang-poller',
                branch='master',
                pollinterval=598,
                project='clang')
)

# mainline linux kernel
c['change_source'].append(GitPoller(
                'git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git',
                workdir='linux-mainline-poller', 
                branch='master',
                pollinterval=599, 
                usetimestamps=False,
                project='mainline')
)



####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.timed import Nightly
from buildbot.changes import filter

c['schedulers'] = []

# on a change in 'llvmlinux' spawn a build
# before we use it
c['schedulers'].append(SingleBranchScheduler(
                            name="llvmlinux-scheduler",
                            change_filter=filter.ChangeFilter(project='llvmlinux'),
                            builderNames=["llvmlinux"])
)
c['schedulers'].append(ForceScheduler(
                            name="llvmlinux-force-scheduler",
                            builderNames=["llvmlinux"])
)

c['schedulers'].append(ForceScheduler(name="resetup-common", builderNames=["resetup"]))

c['schedulers'].append(SingleBranchScheduler(
                            name="llvm-scheduler",
                            change_filter=filter.ChangeFilter(project='llvm'),
                            treeStableTimer=600,
                            builderNames=["llvm"])
)
c['schedulers'].append(ForceScheduler(
                            name="llvm-force-scheduler",
                            builderNames=["llvm"])
)

c['schedulers'].append(SingleBranchScheduler(
                            name="clang-scheduler",
                            change_filter=filter.ChangeFilter(project='clang'),
                            treeStableTimer=600,
                            builderNames=["clang"])
)
c['schedulers'].append(ForceScheduler(
                            name="clang-force-scheduler",
                            builderNames=["clang"])
)

c['schedulers'].append(SingleBranchScheduler(
                            name="kernel-scheduler",
                            change_filter=filter.ChangeFilter(project='kernel'),
                            treeStableTimer=600,
                            builderNames=["mainline-vexpress", "mainline-x86_64"])
)
c['schedulers'].append(ForceScheduler(
                            name="kernel-force-scheduler",
                            builderNames=["mainline-vexpress", "mainline-x86_64"])
)

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand


#  build factory for llvmlinux builder
#  execute and test before we can go on and use the tool
factory_llvmsetup = BuildFactory()
factory_llvmsetup.addStep(Git(repourl='http://git.linuxfoundation.org/llvmlinux.git', 
			      mode='incremental',
			      alwaysUseLatest=True,
			      logEnviron=False,
			      clobberOnFailure=True))
factory_llvmsetup.addStep(ShellCommand(command=["make", "-C" , "targets/vexpress", "mrproper"],
			      description='mrproper',
			      haltOnFailure=True,
			      logEnviron=False,
			      timeout=2400))
factory_llvmsetup.addStep(ShellCommand(command=["make", "-C" , "targets/vexpress", "sync-all"],
			      description='sync-all',
			      haltOnFailure=False,
			      logEnviron=False,
			      timeout=2400))
factory_llvmsetup.addStep(ShellCommand(command=["make", "-C" , "targets/vexpress"],
			      description='make',
			      haltOnFailure=True,
			      logEnviron=True,
			      timeout=3600))
factory_llvmsetup.addStep(ShellCommand(command=["make", "-C" , "targets/vexpress" , "test-boot-poweroff"],
			      timeout=2400,
			      description='test-boot-poweroff',
			      haltOnFailure=True,
			      logEnviron=False,
			      usePTY=True))
factory_llvmsetup.addStep(ShellCommand(workdir="../common/",
                              haltOnFailure=True,
			      logEnviron=False,
                              command=["git", "remote", "-v", "update"],
                              description="update common"))
factory_llvmsetup.addStep(ShellCommand(workdir="../common/",
                              haltOnFailure=True,
			      logEnviron=False,
                              command=["git", "pull"],
                              description=["pull", "update"]))
# common llvm + clang


common_commands = [
         ShellCommand(workdir="../common", command=["make", "-C", "targets/vexpress", "GIT_HARD_RESET=1", "kernel-sync"],
                             description='kernel-clean',
                             haltOnFailure=True,
			     logEnviron=False,
                             timeout=2400)  ,
         ShellCommand(workdir="../common", command=["make", "-C", "targets/vexpress", "GIT_HARD_RESET=1", "test-boot-poweroff"],
                             description='test-clang-boot-poweroff',
                             haltOnFailure=True,
			     logEnviron=False,
                             timeout=2400)
]

common_commands_gcc = [
         ShellCommand(workdir="../common", command=["sleep", "120"],
                             description='wait-for-patch',
                             haltOnFailure=True,
			     logEnviron=False,
                             timeout=3600)  ,
         ShellCommand(workdir="../common", command=["make", "-C", "targets/vexpress", "GIT_HARD_RESET=1", "kernel-gcc-sync"],
                             description='kernel-gcc-clean',
                             haltOnFailure=True,
			     logEnviron=False,
                             timeout=2400)  ,
         ShellCommand(workdir="../common", command=["make", "-C", "targets/vexpress", "test-gcc-boot-poweroff"],
                             description='test-gcc-boot-poweroff',
                             haltOnFailure=True,
			     logEnviron=False,
                             timeout=3600)  ,
]


# build factory for llvm builder
factory_llvm = BuildFactory()
factory_llvm.addStep(ShellCommand(workdir="../common/clang/src/llvm", command=["git", "remote", "-v", "update"],
                     description='gitup',
                     haltOnFailure=True,
                     logEnviron=False,
                     timeout=3600))
factory_llvm.addStep(Git(repourl='http://llvm.org/git/llvm.git', 
                     mode='incremental',
                     clobberOnFailure=True,
		     logEnviron=False,
                     workdir="../common/clang/src/llvm"))
factory_llvm.addStep(ShellCommand(workdir="../common", command=["make", "-C", "targets/vexpress", "GIT_HARD_RESET=1", "llvm-clean"],
                     description='llvm-clean',
                     haltOnFailure=True,
                     logEnviron=False,
                     timeout=3600))
factory_llvm.addSteps(common_commands)

# build factory for clang builder
factory_clang = BuildFactory()
factory_llvm.addStep(ShellCommand(workdir="../common/clang/src/clang", command=["git", "remote", "-v", "update"],
                     description='gitup',
                     haltOnFailure=True,
                     logEnviron=False,
                     timeout=3600))
factory_clang.addStep(Git(repourl='http://llvm.org/git/clang.git', 
                     mode='incremental',
		     logEnviron=False,
                     clobberOnFailure=True,
                     workdir="../common/clang/src/llvm/tools/clang"))
factory_llvm.addStep(ShellCommand(workdir="../common", command=["make", "-C", "targets/vexpress", "GIT_HARD_RESET=1", "clang-clean"],
                     description='clang-clean',
                     haltOnFailure=True,
                     logEnviron=False,
                     timeout=3600))
factory_clang.addSteps(common_commands)

factory_mainlinevexpress = BuildFactory()
factory_mainlinevexpress.addStep(Git(repourl='git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git', 
                     mode='incremental',
		     logEnviron=False,
                     clobberOnFailure=True,
                     workdir="../common/targets/vexpress/src/linux"))
factory_mainlinevexpress.addSteps(common_commands)
# checker on arm
factory_mainlinevexpress.addStep(ShellCommand(workdir="../common", command=["make", "-C", "targets/vexpress", "kernel-clean"],
                     haltOnFailure=False,
                     description='kernel-clean',
                     timeout=2400,
		     logEnviron=False))
factory_mainlinevexpress.addStep(ShellCommand(workdir="../common", command=["make", "-C", "targets/vexpress", "kernel-scan-build"],
                     haltOnFailure=False,
                     description='kernel-scan-build',
                     timeout=7200,
		     logEnviron=False))
factory_mainlinevexpress.addStep(ShellCommand(workdir="../", command=["./export_checker_arm.sh"],
                             description='export_checker_arm',
                             haltOnFailure=False,
			     logEnviron=False,
                             timeout=600) )


### x86 Factories
from buildbot.steps.transfer import DirectoryUpload
commands_x86 = [
         ShellCommand(workdir="../common", command=["make", "-C", "targets/x86_64_tiny", "GIT_HARD_RESET=1", "kernel-sync"],
                             description='x86-kernel-clean',
                             haltOnFailure=True,
			     logEnviron=False,
                             timeout=2400)  ,
         ShellCommand(workdir="../common", command=["make", "-C", "targets/x86_64_tiny", "GIT_HARD_RESET=1", "clang-build"],
                             description='x86-clang-build',
                             haltOnFailure=True,
			     logEnviron=False,
                             timeout=2400)  ,
         ShellCommand(workdir="../common", command=["make", "-C", "targets/x86_64_tiny", "GIT_HARD_RESET=1", "test-kill-bot"],
                             description='x86-boot-test-kill',
                             haltOnFailure=True,
			     logEnviron=False,
                             timeout=2400)
]

factory_mainlinex86_64 = BuildFactory()
factory_mainlinex86_64.addStep(Git(repourl='git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git', 
                     mode='incremental',
		     logEnviron=False,
                     clobberOnFailure=True,
                     workdir="../common/targets/x86_64_tiny/src/linux"))
factory_mainlinex86_64.addSteps(commands_x86)

### resetup Factories

factory_resetup_common = BuildFactory()
factory_resetup_common.addStep(ShellCommand(workdir="../",
                                            description="rm",
					    logEnviron=False,
                                            command=["rm", "-rRf", "common"]))
factory_resetup_common.addStep(ShellCommand(workdir="../", description="clone",
					    logEnviron=False,
                                            command=["git", "clone", "llvmlinux/build/.git", "common"]))
factory_resetup_common.addStep(ShellCommand(workdir="../common",
					    logEnviron=False,
                                            timeout=3600,
                                            description="refetch",
                                            command=["make", "-C", "targets/vexpress", "clang-fetch", "qemu-fetch", "kernel-fetch"]))

# for now: serialize!
from buildbot import locks
build_kernel_clang_arm_lock = locks.SlaveLock("slave_builds_clang", maxCount = 1)
build_kernel_gcc_arm_lock = locks.SlaveLock("slave_builds_gcc", maxCount = 1)

from buildbot.config import BuilderConfig
c['builders'] = []
c['builders'].append(
    BuilderConfig(name="llvmlinux",
      locks=[build_kernel_clang_arm_lock.access('exclusive'), build_kernel_gcc_arm_lock.access('exclusive')],
      slavenames=["main-slave"],
      factory=factory_llvmsetup))
c['builders'].append(
    BuilderConfig(name="llvm",
      locks=[build_kernel_clang_arm_lock.access('exclusive'), build_kernel_gcc_arm_lock.access('exclusive')],
      slavenames=["main-slave"],
      factory=factory_llvm))
c['builders'].append(
    BuilderConfig(name="clang",
      locks=[build_kernel_clang_arm_lock.access('exclusive'), build_kernel_gcc_arm_lock.access('exclusive')],
      slavenames=["main-slave"],
      factory=factory_clang))
c['builders'].append(
    BuilderConfig(name="mainline-vexpress",
      #locks=[build_kernel_clang_arm_lock.access('exclusive')],
      locks=[build_kernel_clang_arm_lock.access('exclusive'), build_kernel_gcc_arm_lock.access('exclusive')],
      slavenames=["main-slave"],
      factory=factory_mainlinevexpress))
c['builders'].append(
    BuilderConfig(name="mainline-x86_64",
      locks=[build_kernel_clang_arm_lock.access('exclusive'), build_kernel_gcc_arm_lock.access('exclusive')],
      slavenames=["main-slave"],
      factory=factory_mainlinex86_64))
c['builders'].append(
    BuilderConfig(name="resetup",
      #locks=[build_lock.access('exclusive')],
      locks=[build_kernel_clang_arm_lock.access('exclusive'), build_kernel_gcc_arm_lock.access('exclusive')],
      slavenames=["main-slave"],
      factory=factory_resetup_common))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("admin","123oink")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

from buildbot.status import words
irc = words.IRC("irc.oftc.net", "dragux",
    #useColors=True,
    noticeOnChannel=True,
    channels=[{"channel": "#llvmlinux"}],
    #password="mysecretnickservpassword",
    notify_events={
       'success': 1,
       'exception': 1,
       'successToFailure': 1,
       'failureToSuccess': 1,
   })
#c['status'].append(irc)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "LLVMLINUX"
c['titleURL'] = "http://llvm.linuxfoundation.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

#c['buildbotURL'] = "http://localhost:8010/"
c['buildbotURL'] = "http://buildbot.llvm.linuxfoundation.org/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
