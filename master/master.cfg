# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### IMPORTs, PATHs
######################

import os, sys

PWD = os.path.dirname(os.path.abspath(__file__))
path = os.path.join(PWD, '../')
if path not in sys.path:
  sys.path.append(path)

# Reload every module, so that we are more resilient to code changes
# on buildbot reconfig.
#
# There are still possible problems related to the ordering dependency
# on reloads, but this should at least help.
from llvmlinux.buildbot.util import reloading
reloading.reload_all(only_paths = [os.environ.get('HOME'), basedir,
                                   os.path.normpath(basedir)],
                     log = True)

import config

reload(config.slaves)
#reload(config.changesources)
#reload(config.schedulers)
#reload(config.status)
reload(config)

####### RESOURCE USAGE
######################

# Number of build records to maintain per builder.
c['buildHorizon'] = 200

# Number of logs to maintain per builder.
c['logHorizon'] = 50

# Number of events (connect, disconnect, etc.) to maintain.
c['eventHorizon'] = 200

# Number of builds to cache in memory.
c['buildCacheSize'] = 200

# Do not compress logs to reduce server load.
# We have a designated build master with large enough HDD.
c['logCompressionLimit'] = False


####### BUILDSLAVES
###################

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.

c['slaves'] = []
c['slaves'] = config.slaves.get_build_slaves()

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9999


####### CHANGESOURCES
#####################

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []

mychangesources = config.changesources.get_changesources()
for i in mychangesources:
    c['change_source'].append(i)


####### SCHEDULERS
##################

# Configure the Schedulers, which decide how to react to incoming changes.  

c['schedulers'] = []

#myschedulers = config.schedulers.get_schedulers()
#for i in myschedulers:
#    c['schedulers'].append(i)

####### BUILDERS
################

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

c['builders'] = []

# dummy
from buildbot.config import BuilderConfig
from buildbot.process import factory
from buildbot.schedulers.forcesched import ForceScheduler
f = factory.BuildFactory()
c['builders'].append(BuilderConfig(name="localhost", slavename="localhost", factory=f))
c['schedulers'].append(ForceScheduler(
                            name="dummy",
                            builderNames=["localhost"])
)


#mybuilders = config.builders.get_builders()
#for i in mybuilders:
#    c['builders'].append(i)

####### STATUS TARGETS
######################

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("admin","123oink")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

#mystatustargets = config.status.get_statustargets()
#for i in mystatustargets:
#    c['status'].append(i)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "LLVMLINUX"
c['titleURL'] = "http://llvm.linuxfoundation.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"
#c['buildbotURL'] = "http://buildbot.llvm.linuxfoundation.org/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
